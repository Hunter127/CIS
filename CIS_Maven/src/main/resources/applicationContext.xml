<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">
	
	<!-- 配置自动扫描的包 ,把类注册为bean，用于spring的IOC管理-->
	<context:component-scan base-package="com.hunter.cis"></context:component-scan>
	
	<!-- 配置数据源，使用c3p0 -->
	     <!-- 导入资源文件 -->
	<context:property-placeholder location="classpath:db.properties"/>
	<!-- 使用spel -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>

		<property name="initialPoolSize" value="${jdbc.initPoolSize}"></property>
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
	</bean>
	
	<!-- 配置 Hibernate 的 SessionFactory 实例: 通过 Spring 提供的 LocalSessionFactoryBean 进行配置 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 配置数据源属性 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 配置 hibernate 配置文件的位置及名称 -->
		<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
		
		<!-- 配置 hibernate 映射文件的位置及名称, 可以使用通配符 -->
		<property name="mappingLocations" 
			value="classpath:com/hunter/cis/model/*.hbm.xml"></property>
	</bean>

	<!-- 配置 Spring 的声明式事务,,让spring管理sessionfactory -->
	<!-- 1. 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!-- 这里、、、、、、、、、、、、、、、、、、、、、、的很多bean都不用写了，在实现类中已经通过注解自动装配了，不过主要还是业务层，数据层，的实现类 -->
	<!-- <bean id="userService"
		class="com.hunter.clouder.service.UserService"></bean>
	 -->
	<!-- <bean id="user_service" class="service.impl.UserServiceImpl">
		<property name="ud">
			<ref bean="user_dao" />
		</property>
	</bean> -->
	
	
	<!-- 注意: 在 IOC 容器中配置 Struts2 的 Action 时, 需要配置 scope 属性, 其值必须为 prototype -->
	<!-- <bean id="userAction" 
		class="com.hunter.clouder.action.UserAction"
		scope="prototype">
		<property name="us" ref="userService"></property>	
	</bean> -->

	<!-- 2. 配置事务属性, 需要事务管理器（用事物管理器去管理事物，事物与method结合在一起） -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<!-- <tx:method name="purchase" propagation="REQUIRES_NEW"/>事物的传播行为  -->
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>

	<!-- 3. 配置事务切点, 并把切点和事务属性关联起来 --><!-- 事物属性，如果去掉这段代码，（钱不足）理论上数量减一，钱不减。。但实践是连session都获取不到 -->
    <!-- 个人总结：有时要确定究竟把那一层看作一个事物，从这一层切进去，获取事物切点。那么这个事物错误了就会回滚 -->
    <aop:config>
		<aop:pointcut expression="execution(* com.hunter.cis.service.*.*(..))" 
			id="txPointcut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config> 

</beans>
